<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg">
<head>
  <meta charset="UTF-8" />
  <title>How to do it...</title>
  <link type="text/css" rel="stylesheet" media="all" href="style.css" />
  <link type="text/css" rel="stylesheet" media="all" href="core.css" />
</head>
<body>
  <div id="sbo-rt-content"><section>

    <header>

      <h1 class="header-title">How to do it...</h1>

    </header>

    <article>

      <p>Before we start, we should create a new Orchestration Job for each use case and then we can insert Matillion variables and create Shared Jobs.</p>

      <ol>

        <li>Create new Orchestration Job with bash component and name it <kbd>Refresh Extract</kbd><span>, as follows</span></li>

      </ol>

      <p class="CDPAlignCenter CDPAlign">

        <img class="aligncenter size-full wp-image-2149 image-border" src="images/7c1dbd2e-0347-4ee9-8662-3c68a5d29323.png" style="width:24.08em;height:9.50em;" />

      </p>

      <p style="padding-left: 60px">Bash component has the <kbd>timeout</kbd> parameter. By default, it is 1,000 seconds. For extract, we might increase this in order to wait while your biggest extract refresh.</p>

      <ol start="2">

        <li>Then paste the code that we tested already and replace Tableau objects with the Matillion parameters<span>, as follows</span>:</li>

      </ol>

      <pre style="padding-left: 60px"><strong>#go to tabcmd location</strong><br/><strong>cd /opt/tableau/tabcmd/bin</strong><br/><strong>#login tableau server</strong><br/><strong>./tabcmd  login -u Admin -p '${password}' -s ${tableau_host} --no-certcheck  --accepteula</strong><br/><strong>#refresh extract</strong><br/><strong>./tabcmd refreshextracts --datasource "${data_source_name}" --project "${project_name}" --no-certcheck –-synchronous</strong></pre>

      <p style="padding-left: 60px">As a result, this component will refresh Tableau Extract based on value for variable.</p>

      <ol start="3">

        <li>In addition, we should create Matillion variable for our parameter. Click on the right button on canvas and choose <span class="packt_screen">Manage Variables</span> as shown in the following screenshot:</li>

      </ol>

      <p class="CDPAlignCenter CDPAlign">

        <img class="aligncenter size-full wp-image-2151 image-border" src="images/a1b49596-156d-4463-960d-ba0ead5764a6.png" style="width:30.08em;height:34.42em;" />

      </p>

      <ol start="4">

        <li>Then add three new variables that have to be public<span>, as follows</span>:</li>

      </ol>

      <p class="CDPAlignCenter CDPAlign">

        <img class="aligncenter size-full wp-image-2152 image-border" src="images/788f2439-c9d4-4335-b7f1-f386bff63134.png" style="width:133.25em;height:48.92em;" />

      </p>

      <ol start="5">

        <li>Create one more job or duplicate an existing one and name it <kbd>Tableau Export PDF</kbd>. Enter the following code with the Matillion parameters:</li>

      </ol>

      <pre style="padding-left: 60px"><strong>#go to tabcmd location</strong><br/><strong>cd /opt/tableau/tabcmd/bin</strong><br/><strong>#login tableau server</strong><br/><strong>./tabcmd  login -u Admin -p 'p@ssword' -s ${tableau_host} --no-certcheck  --accepteula</strong><br/><strong>#export pdf from Tabelau Server</strong><br/><strong>./tabcmd export "${tableau_view_name}" --pdf --pagelayout landscape -f "/tmp/$(date +%Y%m%d)_${tableau_report_name}.pdf" --no-certcheck</strong><br/><strong>#upload pdf to the S3</strong><br/><strong>aws s3 cp /tmp/$(date +%Y%m%d)_${tableau_report_name}.pdf s3://${bucket_name}/$(date +%Y%m%d)/$(date +%Y%m%d)_${tableau_report_name}.pdf</strong><br/><strong>#clean out</strong><br/><strong>rm /tmp/$(date +%Y%m%d)_${tableau_report_name}.pdf</strong></pre>

      <p style="padding-left: 60px">This script will export Tableau View into the <kbd>/tmp</kbd> location on our EC2 and then will upload to the Reporting Bucket via AWS CLI. Moreover, it will automatically create a folder in bucket with date. In addition, we specify the file name according with our naming convention.</p>

      <p class="mce-root"></p>

      <ol start="6">

        <li>Moreover, you should create the following variables in the same way as in step #1:</li>

      </ol>

      <ul>

        <li style="padding-left: 30px"><kbd>tableau_report_name</kbd></li>

        <li style="padding-left: 30px"><kbd>tableau_view_name</kbd></li>

        <li style="padding-left: 30px"><kbd>tableau_host</kbd></li>

        <li style="padding-left: 30px"><kbd>bucket_name</kbd></li>

      </ul>

      <p style="padding-left: 60px">You can see how this solution is flexible and you can achieve many different use cases.</p>

      <ol start="7">

        <li>Now, we can create the Shared Jobs and wrap our Orchestration Jobs. Click on the right button on job name and choose <span class="packt_screen">Generate Shared Job</span><span>, as follows:</span></li>

      </ol>

      <p class="CDPAlignCenter CDPAlign">

        <img class="aligncenter size-full wp-image-2153 image-border" src="images/484b7e64-c1e7-41db-bd8b-44bc7c06b08f.png" style="width:31.08em;height:31.25em;" />

      </p>

      <ol start="8">

        <li>Then, we should fill in the form and choose the following mentioned options:</li>

      </ol>

      <table style="border-collapse: collapse;width: 100%" border="1">

        <tbody>

          <tr>
            <td>
              <p><span class="packt_screen">Package</span></p>
            </td>
            <td>
              <p><kbd>Packt.tableau.refreshextract</kbd></p>
            </td>
          </tr>

          <tr>
            <td>
              <p><span class="packt_screen">Name</span></p>
            </td>
            <td>
              <p><kbd>Refresh Tableau Extract</kbd></p>
            </td>
          </tr>

          <tr>
            <td>
              <p><span class="packt_screen">Description</span></p>
            </td>
            <td>
              <p><kbd>This component refresh Tableau Extract</kbd></p>
            </td>
          </tr>

        </tbody>

      </table>

      <ol start="9">

        <li>Click on <span class="packt_screen">Next</span> and you will see the <span class="packt_screen">Parameter Configuration</span> step. Then, click on <span class="packt_screen">OK</span>.</li>

        <li>Then, do the same for the second job <span class="packt_screen">Tableau Export to PDF</span><span>, as follows</span>:</li>

      </ol>

      <table style="border-collapse: collapse;width: 100%" border="1">

        <tbody>

          <tr>
            <td>
              <p><span class="packt_screen">Package</span></p>
            </td>
            <td>
              <p><kbd>Packt.tableau.exporttopdf</kbd></p>
            </td>
          </tr>

          <tr>
            <td>
              <p><span class="packt_screen">Name</span></p>
            </td>
            <td>
              <p><kbd>Tableau Export to PDF</kbd></p>
            </td>
          </tr>

          <tr>
            <td>
              <p><span class="packt_screen">Description</span></p>
            </td>
            <td>
              <p><kbd>This component will export PDF report to S3 Bucket</kbd></p>
            </td>
          </tr>

        </tbody>

      </table>

      <ol start="11">

        <li>Click on <span class="packt_screen">Next</span>, fill in the <span class="packt_screen">Parameter Configuration</span> page and click on <span class="packt_screen">OK</span>. These parameters will be used for the data entry later.</li>

        <li>Let's check out the jobs. Navigate to <span class="packt_screen">Shared Jobs Pane</span> | <span class="packt_screen">User Defined</span> | <span class="packt_screen">Packt</span><span>, as follows:</span></li>

      </ol>

      <p class="CDPAlignCenter CDPAlign">

        <img class="aligncenter size-full wp-image-2154 image-border" src="images/ae6bd7b6-2d07-415c-952a-ce2d95633bcd.png" style="width:19.17em;height:9.75em;" />

      </p>

      <p style="padding-left: 60px">As a result, you'll see our new jobs.</p>

      <ol start="13">

        <li>Let's put it all together. Create a new Orchestration Job and drag and drop our new shared components<span>, as follows</span>:</li>

      </ol>

      <p class="CDPAlignCenter CDPAlign">

        <img class="aligncenter size-full wp-image-2155 image-border" src="images/45747c8d-062c-40c7-b0e6-86619d94e8cb.png" style="width:38.58em;height:10.42em;" />

      </p>

      <p class="mce-root"></p>

      <p class="mce-root"></p>

      <p style="padding-left: 90px">Usually, one extract can source many different workbooks. As a result, we can use another powerful feature of <em>Matillion—Fixed Iterator.</em> More information can be found here: <a href="https://redshiftsupport.matillion.com/customer/en/portal/articles/2235536-fixed-iterator">https://redshiftsupport.matillion.com/customer/en/portal/articles/2235536-fixed-iterator</a>.</p>

      <ol start="14">

        <li>Let's add a fixed iterator on top of the job as it will allow us to specify multiple reports at once<span>, as follows</span>:</li>

      </ol>

      <p class="CDPAlignCenter CDPAlign">

        <img class="aligncenter size-full wp-image-2156 image-border" src="images/8243e62c-f405-443e-a2b8-4b407749c7ce.png" style="width:45.50em;height:11.50em;" />

      </p>

      <p>As a result, we have created new custom components that look very friendly and familiar for our end users. Using this approach, we can leverage any Tabcmd command and create a custom component for it.</p>

    </article>

  </section>

</div>
</body>
</html>