<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg">
<head>
  <meta charset="UTF-8" />
  <title>How it works...</title>
  <link type="text/css" rel="stylesheet" media="all" href="style.css" />
  <link type="text/css" rel="stylesheet" media="all" href="core.css" />
</head>
<body>
  <div id="sbo-rt-content"><section>

    <header>

      <h1 class="header-title">How it works...</h1>

    </header>

    <article>

      <p>The Tableau performance recording functionality is a built-in tool that can help you assess the performance of your workbook and identify processes that might be slowing it down. In this recipe, we started the performance recording, and performed some actions, such as filtering. After we finished recording, Tableau automatically generated a read-only workbook that contains a dashboard with the processes that have taken place since we started recording, and the respective times they took to run.</p>

      <p>The dashboard contains the <span class="packt_screen">Timeline</span>, <span class="packt_screen">Events</span>, and <span class="packt_screen">Query</span> views, which are described here:</p>

      <ul>

        <li><span class="packt_screen">Timeline</span>: This view shows the processes that have taken place during the recording in chronological order. The processes are ordered from left to right along the <q>x</q>-axis, which represents the time since Tableau started. The view also provides information on the context of the events (<span class="packt_screen">Workbook</span>, <span class="packt_screen">Dashboard</span>, and <span class="packt_screen">Worksheet</span>) and the nature of the event itself (<span class="packt_screen">Event</span>). If you noticed performance issues with your workbook, this view is useful in exploring where the bottleneck occurs. Let'<span>s look at the processes that took place in the</span> <span class="packt_screen">Timeline</span> <span>view, in the following screenshot:</span></li>

      </ul>

      <p class="CDPAlignCenter CDPAlign">

        <img class="aligncenter size-full wp-image-2434 image-border" src="images/54b6983a-3237-46fe-b84d-05d38b2902d6.png" style="width:82.92em;height:13.83em;" />

      </p>

      <ul>

        <li><span class="packt_screen">Events</span>: This view also shows the processes (events), but sorted by their duration, which is shown on the <q>x</q> axis. This view is very helpful because it highlights the processes that are taking the longest to run, making it easier to identify where the performance issue might be. In <span>the following screenshot, we can see the processes of the</span> <span class="packt_screen">Events</span> <span>view:</span></li>

      </ul>

      <p class="CDPAlignCenter CDPAlign">

        <img class="aligncenter size-full wp-image-2435 image-border" src="images/d9f90dda-8f54-42cd-99c7-8558e6b1be19.png" style="width:82.50em;height:11.83em;" />

      </p>

      <p style="padding-left: 60px" class="CDPAlignLeft CDPAlign">Both of the preceding views can be adjusted by using the <span class="packt_screen">Show Events taking at least (in seconds):</span> filter, located in the top of the dashboard. By default, events taking less than <span class="packt_screen">0.10</span> second are filtered out of both views, but shorter events can also be displayed by moving the filter slider to the left. In the following screenshot, we can see how the views can be adjusted:</p>

      <p class="CDPAlignCenter CDPAlign">

        <img class="aligncenter size-full wp-image-2436 image-border" src="images/7f521008-2e70-4603-9e7b-3945d02f91ee.png" style="width:81.75em;height:2.67em;" />

      </p>

      <ul>

        <li><span class="packt_screen">Query</span>: The view is, by default, empty. However, it will be populated when you select an <span class="packt_screen">Executing Query</span> event in either the <span class="packt_screen">Timeline</span> or <span class="packt_screen">Events</span> view. Let'<span>s look at the</span> <span class="packt_screen">Query</span> <span>view in the following screenshot:</span></li>

      </ul>

      <p class="CDPAlignCenter CDPAlign">

        <img class="aligncenter size-full wp-image-2437 image-border" src="images/f939632a-943a-4139-871e-aadaee0fb07e.png" style="width:18.50em;height:12.67em;" />

      </p>

      <p style="padding-left: 60px">When you select a query event, the SQL or XML text (depending on whether you're connected to a data source directly or to a published data source, respectively) of that query will be displayed in the <span class="packt_screen">Query</span> view. You can then use the text of the query to optimize it. We can  view the result in the following screenshot:</p>

      <p class="CDPAlignCenter CDPAlign">

        <img class="aligncenter size-full wp-image-2438 image-border" src="images/ed3c1e99-a304-4716-b052-f9ed85d981c3.png" style="width:71.33em;height:16.25em;" />

      </p>

    </article>

  </section>

</div>
</body>
</html>