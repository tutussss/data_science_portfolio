<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg">
<head>
  <meta charset="UTF-8" />
  <title>How to do it...</title>
  <link type="text/css" rel="stylesheet" media="all" href="style.css" />
  <link type="text/css" rel="stylesheet" media="all" href="core.css" />
</head>
<body>
  <div id="sbo-rt-content"><section>

    <header>

      <h1 class="header-title">How to do it...</h1>

    </header>

    <article>

      <p>Let's download <kbd>tabcmd</kbd> and install it at Linux box:</p>

      <ol>

        <li>First, we will go to the Tableau Releases website (<a href="https://www.tableau.com/support/releases">https://www.tableau.com/support/releases</a>) and download Tabcmd for Linux. We should download the same version as our Tableau Server. In our case, it is 2018.2, as shown in the following screenshot:</li>

      </ol>

      <p class="CDPAlignCenter CDPAlign">

        <img class="aligncenter size-full wp-image-2148 image-border" src="images/df7a811e-5b8f-46cf-9ccf-49e3d96ffcd6.png" style="width:86.83em;height:22.92em;" />

      </p>

      <ol start="2">

        <li>We will download RMP archive because Amazon Linux has lots in common with Red Hat.</li>

      </ol>

      <ol start="3">

        <li>Then we should, upload this into the EC2 instance with Matillion. There are multiple ways to do this. For example, the fastest way for us is to use AWS CLI S3. We will upload the file into the S3 bucket and then download it from EC2 instance.</li>

        <li>Next, we should install this archive on the EC2. Go to the location of archive and execute the following command or specify the full path to the file:</li>

      </ol>

      <pre style="padding-left: 60px"><strong>sudo rpm -Uvh tableau-tabcmd-2018-2-2.noarch.rpm</strong></pre>

      <ol start="5">

        <li>As a result, we will have to install Tabcmd for our Linux system. Now, we want to make sure, that everything works as expected.</li>

      </ol>

      <div class="mce-root packt_infobox">It is important that Tableau and Matillion can see each other from the network point of view. We recommend that you deploy your data analytics solution using the same AWS account and the same region. In case you have to use other topology, you might need to configure access.</div>

      <ol start="6">

        <li>In order to test, we can do the following commands—login to Tableau Server and trigger extract. Also, you might to execute any other <kbd>tabcmd</kbd> command, as follows:<span> </span></li>

      </ol>

      <pre style="padding-left: 60px"><strong>#matillion is running under tomcat user and we will switch to this user</strong><br/><strong>sudo -su tomcat </strong><br/><strong>#go to tabcmd location</strong><br/><strong>cd /opt/tableau/tabcmd/bin</strong><br/><strong>#login tableau server</strong><br/><strong>./tabcmd  login -u Admin -p 'p@ssword' -s https://myserver:443 --no-certcheck  --     accepteula</strong><br/><strong>#refresh extract </strong><br/><strong>./tabcmd refreshextracts --datasource "My Sexy Data Source" --project "My project" --no-certcheck –synchronous</strong></pre>

      <p style="padding-left: 60px">In the preceding command lines, we are using the following Tabcmd parameters:</p>

      <ul>

        <li style="padding-left: 30px"><kbd>--no-certcheck</kbd>: We need this in case of SSL.</li>

        <li style="padding-left: 30px"><kbd>--accepteula</kbd>: This is new parameter, that was introduced recently.</li>

        <li style="padding-left: 30px"><kbd>-u</kbd>: Tableau user name that has permissions to perform desired action.</li>

        <li style="padding-left: 30px"><kbd>-p</kbd>: This parameter represents the password.</li>

        <li style="padding-left: 30px"><kbd>-s</kbd>: Tableau host or load balancer endpoint.</li>

        <li style="padding-left: 30px"><kbd>--datasource</kbd>: Tableau data source.</li>

        <li style="padding-left: 30px"><kbd>--project</kbd>: Project where the data source is stored.</li>

        <li style="padding-left: 30px"><kbd>--synchronous</kbd>: This parameter will await feedback from the Tableau Server about the end of the Tableau Extract refresh. This allows us to execute jobs in chain.</li>

      </ul>

      <p>As a result, we can trigger Tableau from Matillion EC2. We can <span>even</span><span> </span><span>copy this logic into the Matillion Bash component, but it will be hard for business users to go through it and self-serve.</span></p>

    </article>

  </section>

</div>
</body>
</html>