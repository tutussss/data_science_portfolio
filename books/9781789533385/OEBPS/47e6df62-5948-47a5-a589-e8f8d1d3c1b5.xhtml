<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg">
<head>
  <meta charset="UTF-8" />
  <title>How to do it...</title>
  <link type="text/css" rel="stylesheet" media="all" href="style.css" />
  <link type="text/css" rel="stylesheet" media="all" href="core.css" />
</head>
<body>
  <div id="sbo-rt-content"><section>

    <header>

      <h1 class="header-title">How to do it...</h1>

    </header>

    <article>

      <p>We will adjust our tables to get the maximum from Redshift in terms of a place for computing, and, allow Tableau to efficiently render the results and visualize it as follows:</p>

      <ol start="1">

        <li>To choose the right sort key, we should evaluate our queries to find a date column that we are using for filters (the <kbd>WHERE</kbd> condition in SQL). For our huge fact table, it is the <kbd>lo_orderdate</kbd> column. For the remaining dimension tables, we will use their primary key as a sort key: <kbd>p_partkey</kbd>, <kbd>s_supkey</kbd>, <kbd>d_datekey</kbd>.</li>

        <li>Then, we will choose candidates for the sort key. The following are the three types of distribution available in Redshift:</li>

      </ol>

      <ul>

        <li style="padding-left: 30px;">The key distribution</li>

        <li style="padding-left: 30px;">The all distribution</li>

        <li style="padding-left: 30px;">The even distribution</li>

      </ul>

      <p style="padding-left: 60px;">You can learn more about Redshift distribution at the following URL:</p>

      <p style="padding-left: 60px;"><a href="https://docs.aws.amazon.com/redshift/latest/dg/c_best-practices-best-dist-key.html">https://docs.aws.amazon.com/redshift/latest/dg/c_best-practices-best-dist-key.html</a></p>

      <p style="padding-left: 60px;"><a href="https://docs.aws.amazon.com/redshift/latest/dg/c_best-practices-best-dist-key.html"></a></p>

      <ol start="3">

        <li>To find the best distribution style, we need to analyze the SQL query that is generated by Tableau and executed by Redshift. We should use the preceding query to extract the SQL from the cursor. Then, we should look to the execution plan by running our query with the word <kbd>EXPLAIN</kbd><span>, as follows:</span></li>

      </ol>

      <pre style="padding-left: 60px;">explain<br/>SELECT "customer"."c_city" AS "c_city", "dwdate"."d_year" AS "d_year", "supplier"."s_city" AS "s_city",<br/>SUM("lineorder"."lo_revenue") AS "sum_lo_revenue_ok" <br/>FROM "public"."lineorder" "lineorder" <br/>INNER JOIN "public"."customer" "customer" ON ("lineorder"."lo_custkey" = "customer"."c_custkey") <br/>INNER JOIN "public"."supplier" "supplier" ON ("lineorder"."lo_suppkey" = "supplier"."s_suppkey") <br/>INNER JOIN "public"."dwdate" "dwdate" ON ("lineorder"."lo_orderdate" = "dwdate"."d_datekey") <br/>WHERE (("customer"."c_city" IN ('UNITED KI1', 'UNITED KI5')) <br/>AND (("supplier"."s_city" IN ('UNITED KI1', 'UNITED KI5')) <br/>AND ("dwdate"."d_yearmonth" IN ('Dec1997'))))<br/>GROUP BY 1, 2, 3</pre>

      <p style="padding-left: 60px;">We will get the plan as follows:</p>

      <p class="CDPAlignCenter CDPAlign">

        <img class="aligncenter size-full wp-image-1323 image-border" src="images/06706121-b59a-4972-a04d-f067997d9a8b.png" style="width:58.42em;height:31.33em;" />

      </p>

      <p style="padding-left: 60px;">I've highlighted <kbd>BS_BCAST_INNER</kbd>. It means that the inner join was broadcasted across all slices. We should eliminate any broadcast and distribution steps. You can learn more about query patterns here:</p>

      <p style="padding-left: 60px;"><a href="https://docs.aws.amazon.com/redshift/latest/dg/t_evaluating_query_patterns.html">https://docs.aws.amazon.com/redshift/latest/dg/t_evaluating_query_patterns.html</a></p>

      <p style="padding-left: 60px;">In our case, we should look at the join between the fact table with 600 mln and dimension tables. Based on fairly small rows in the dimension tables, we can distribute the dimension tables <kbd>SUPPLIER</kbd>, <kbd>PART</kbd>, and <kbd>DWDATE</kbd> across all nodes. For the <kbd>LINEORDER</kbd> table, we will use <kbd>lo_custkey</kbd> as a distribution key and for the <kbd>CUSTOMER</kbd> table, we will use the <kbd>c_custkey</kbd> as the distribution key.</p>

      <ol start="4">

        <li>Next, we should compress our data to make sure that we can reduce storage space, and also, reduce the size of the data that is read from storage. It decreases I/O and improves query performance. By default, all data is uncompressed. You can learn more about compression encodings here: <a href="https://docs.aws.amazon.com/redshift/latest/dg/c_Compression_encodings.html">https://docs.aws.amazon.com/redshift/latest/dg/c_Compression_encodings.html</a>. We should use system tables in order to research the best compression encoding. Let's run the following query:</li>

      </ol>

      <pre style="padding-left: 60px;">select col, max(blocknum)<br/>from stv_blocklist b, stv_tbl_perm p<br/>where (b.tbl=p.id) and name ='lineorder'<br/>and col &lt; 17<br/>group by name, col<br/>order by col;</pre>

      <p style="padding-left: 60px;">It will show us the highest block number for each column in the <kbd>LINEORDER</kbd> table. Then, we can start to experiment with different encoding types in order to find the best. In addition, we should always analyze the table after changes in order to update table statistics. However, in our case, we can simply execute the <kbd>COPY</kbd> command with the auto compression parameter.</p>

      <ol start="5">

        <li>Let's apply the changes to our tables and run the same report. Copy the queries from the <kbd>Create_Statementv2_Redshift.sql</kbd><strong> </strong><span>file</span> and run them.</li>

        <li>Then, we should reload data with autocompression. Run SQL from the <kbd>COPY</kbd> data to <kbd>Redshiftv2.txt</kbd> file. Don't forget to insert your ARN.</li>

        <li>Let's refresh our Tableau workbook and see the improvements. Moreover, we can check the query plan and see the changes. In my case, it took 8 seconds.</li>

      </ol>

    </article>

  </section>

</div>
</body>
</html>